name: CI/CD Pipeline

on: push

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

env:
  PYTHON_VERSION: '3.13'
  SEMANTIC_VERSION: '19.0.2'
  working-dir: .

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Check code formatting (Black)
        run: black --check .

      - name: Check import ordering (isort)
        run: isort --check-only .

      - name: Lint code (Ruff)
        run: ruff check .

      - name: Type check (MyPy)
        run: mypy agentsmithy_server

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run tests
        run: pytest -v || test $? -eq 5

  semver:
    name: Release Version Management
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Semantic Release
        id: semantic
        if: startsWith(github.ref, 'refs/heads/master') || startsWith(github.ref, 'refs/heads/main')
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: ${{ env.SEMANTIC_VERSION }}
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
            @semantic-release/exec@6.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get SHA
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "SHA=$sha_new" >> $GITHUB_OUTPUT

      - run: echo ${{ steps.sha.outputs.SHA }}
      - run: echo "New release published=${{ steps.semantic.outputs.new_release_published }}"
      - run: echo "New release version=${{ steps.semantic.outputs.new_release_version }}"


  build_binaries:
    name: Build Executables
    runs-on: ${{ matrix.runner }}
    needs: [semver, lint, test]  # Add lint/test dependencies for tag builds
    # Build only when: new semantic release OR on tags (after lint/test pass)
    if: |
      (needs.semver.outputs.new_release_published == 'true') ||
      (startsWith(github.ref, 'refs/tags/') && needs.lint.result == 'success' && needs.test.result == 'success')
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            label: linux-amd64
            ext: ""
          # NOTE: Linux ARM64 on GitHub-hosted runners is not available on the free plan.
          # TODO: Enable when upgrading plan or using a self-hosted ARM64 runner.
          # - runner: ubuntu-24.04-arm64
          #   label: linux-arm64
          # Example for self-hosted ARM64 runner (labels must match your runner):
          # - runner: [self-hosted, Linux, ARM64]
          #   label: linux-arm64
          - runner: windows-latest
            label: windows-amd64
            ext: ".exe"
          - runner: macos-14
            label: macos-arm64
            ext: ""
          - runner: macos-13
            label: macos-amd64
            ext: ""
    steps:
      - name: Checkout code at release SHA or tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ startsWith(github.ref, 'refs/tags/') && github.ref || needs.semver.outputs.new_sha }}
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Derive release tag and version
        id: ver
        shell: bash
        run: |
          if [ "${{ needs.semver.outputs.new_release_published }}" = "true" ]; then
            VER="${{ needs.semver.outputs.new_release_version }}"
            TAG="v$VER"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            VER="${TAG#v}"
            if [ -z "$VER" ]; then
              echo "Invalid tag format: $TAG (must start with 'v')" >&2
              exit 1
            fi
          else
            echo "No version available: not a new semantic release or tag push" >&2
            exit 0  # Skip without error
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VER" >> $GITHUB_OUTPUT
      - name: Skip if no version
        if: steps.ver.outputs.version == ''
        shell: bash
        run: |
          echo "Skipping build: no version determined"
          exit 0
      - name: Install build dependencies
        if: steps.ver.outputs.version != ''
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Build executable with PyInstaller
        if: steps.ver.outputs.version != ''
        shell: bash
        run: |
          pyinstaller --version
          pyinstaller --onefile \
            --name agentsmithy \
            main.py
      - name: Rename artifacts with version and latest aliases
        if: steps.ver.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          EXT="${{ matrix.ext }}"
          SRC="dist/agentsmithy${EXT}"
          LATEST_NAME="dist/agentsmithy-${{ matrix.label }}-latest${EXT}"
          VER_NAME="dist/agentsmithy-${{ matrix.label }}-${{ steps.ver.outputs.version }}${EXT}"
          mv "$SRC" "$VER_NAME"
          cp "$VER_NAME" "$LATEST_NAME"
      - name: Upload artifacts
        if: steps.ver.outputs.version != ''
        uses: actions/upload-artifact@v4
        with:
          name: agentsmithy-${{ matrix.label }}-${{ steps.ver.outputs.version }}
          path: |
            dist/agentsmithy-${{ matrix.label }}-${{ steps.ver.outputs.version }}${{ matrix.ext }}
            dist/agentsmithy-${{ matrix.label }}-latest${{ matrix.ext }}
  release_upload:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: [build_binaries, semver]
    # Run only when build_binaries succeeded and we have a version
    if: needs.build_binaries.result == 'success' && (needs.semver.outputs.new_release_published == 'true' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: agentsmithy-*
          merge-multiple: true
      - name: Derive tag and version
        id: tag
        shell: bash
        run: |
          if [ "${{ needs.semver.outputs.new_release_published }}" = "true" ]; then
            VER="${{ needs.semver.outputs.new_release_version }}"
            TAG="v$VER"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            VER="${TAG#v}"
            if [ -z "$VER" ]; then
              echo "Invalid tag format: $TAG (must start with 'v')" >&2
              exit 1
            fi
          else
            echo "No version available" >&2
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VER" >> $GITHUB_OUTPUT
      - name: Create/update release with assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            agentsmithy-*
      - name: Publish to GitHub Packages
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          VER="${{ steps.tag.outputs.version }}"
          for f in agentsmithy-*; do
            if [[ "$f" == *latest* ]]; then continue; fi
            echo "Uploading $f to GitHub Packages version $VER"
            BASENAME=$(basename "$f")
            curl -sS -f -L -X PUT \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "Content-Type: application/octet-stream" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --data-binary @"$f" \
              "https://uploads.github.com/repos/${{ github.repository }}/packages/generic/agentsmithy/${VER}/${BASENAME}"
          done



