name: build

on: push

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.13'
  SEMANTIC_VERSION: '19.0.2'
  working-dir: .

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: black
        run: black --check .

      - name: isort
        run: isort --check-only .

      - name: ruff
        run: ruff check .

      - name: mypy
        run: mypy agentsmithy_server

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: run tests
        run: pytest -v || test $? -eq 5

  semver:
    name: generate new release
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: semantic release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: ${{ env.SEMANTIC_VERSION }}
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
            @semantic-release/exec@6.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: get sha
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "SHA=$sha_new" >> $GITHUB_OUTPUT

      - run: echo ${{ steps.sha.outputs.SHA }}



