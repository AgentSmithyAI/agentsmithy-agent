name: build

on: push

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.13'
  SEMANTIC_VERSION: '19.0.2'
  working-dir: .

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: black
        run: black --check .

      - name: isort
        run: isort --check-only .

      - name: ruff
        run: ruff check .

      - name: mypy
        run: mypy agentsmithy_server

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: run tests
        run: pytest -v || test $? -eq 5

  semver:
    name: generate new release
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: semantic release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: ${{ env.SEMANTIC_VERSION }}
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
            @semantic-release/exec@6.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: get sha
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "SHA=$sha_new" >> $GITHUB_OUTPUT

      - run: echo ${{ steps.sha.outputs.SHA }}


  build_binaries:
    name: build binaries (PyInstaller)
    runs-on: ${{ matrix.runner }}
    needs: [semver]
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            label: linux-amd64
          # NOTE: Linux ARM64 on GitHub-hosted runners is not available on the free plan.
          # TODO: Enable when upgrading plan or using a self-hosted ARM64 runner.
          # - runner: ubuntu-24.04-arm64
          #   label: linux-arm64
          # Example for self-hosted ARM64 runner (labels must match your runner):
          # - runner: [self-hosted, Linux, ARM64]
          #   label: linux-arm64
          - runner: windows-latest
            label: windows-amd64
          - runner: macos-14
            label: macos-arm64
          - runner: macos-13
            label: macos-amd64
    steps:
      - name: checkout code at release sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.semver.outputs.new_sha }}

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: install build deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: build (pyinstaller)
        shell: bash
        run: |
          pyinstaller --version
          pyinstaller --onefile \
            --name agentsmithy \
            main.py

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: agentsmithy-${{ matrix.label }}
          path: |
            dist/agentsmithy*

  release_upload:
    name: attach artifacts to GitHub Release
    runs-on: ubuntu-latest
    needs: [build_binaries]
    steps:
      - name: checkout code at release sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.semver.outputs.new_sha }}

      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: agentsmithy-*
          merge-multiple: true

      - name: find release tag for sha
        id: tag
        run: |
          git fetch --tags --force
          TAG=$(git tag --points-at ${{ needs.semver.outputs.new_sha }} | head -n1)
          if [ -z "$TAG" ]; then
            echo "No tag found for release sha; skipping upload" && exit 0
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: create/update release with assets
        if: steps.tag.outputs.tag != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: |
            agentsmithy*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



